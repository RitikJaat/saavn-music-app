{"ast":null,"code":"var _jsxFileName = \"/home/m0nster/Desktop/Code/Test/saavn-music-app/src/context/MusicPlayerContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { Howl } from 'howler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayerContext = /*#__PURE__*/createContext(undefined);\nexport const MusicPlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [currentSong, setCurrentSong] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolumeState] = useState(0.7);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [queue, setQueue] = useState([]);\n  const soundRef = useRef(null);\n  const intervalRef = useRef(null);\n  const cleanupSound = () => {\n    if (soundRef.current) {\n      soundRef.current.stop();\n      soundRef.current.unload();\n      soundRef.current = null;\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n  const startTimer = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        const seconds = soundRef.current.seek();\n        setCurrentTime(seconds);\n      }\n    }, 1000);\n  };\n  const playSong = song => {\n    cleanupSound();\n\n    // Check if downloadUrl exists and has length\n    if (!song.downloadUrl || song.downloadUrl.length === 0) {\n      console.error('Song has no download URLs', song);\n      return;\n    }\n\n    // Use highest quality URL\n    const url = song.downloadUrl[song.downloadUrl.length - 1].url;\n    soundRef.current = new Howl({\n      src: [url],\n      html5: true,\n      volume: volume,\n      onplay: () => {\n        setIsPlaying(true);\n        startTimer();\n      },\n      onend: () => {\n        nextSong();\n      },\n      onload: () => {\n        var _soundRef$current;\n        setDuration(((_soundRef$current = soundRef.current) === null || _soundRef$current === void 0 ? void 0 : _soundRef$current.duration()) || 0);\n      },\n      onpause: () => {\n        setIsPlaying(false);\n      },\n      onstop: () => {\n        setIsPlaying(false);\n      }\n    });\n    soundRef.current.play();\n    setCurrentSong(song);\n  };\n  const pauseSong = () => {\n    var _soundRef$current2;\n    (_soundRef$current2 = soundRef.current) === null || _soundRef$current2 === void 0 ? void 0 : _soundRef$current2.pause();\n    setIsPlaying(false);\n  };\n  const resumeSong = () => {\n    if (soundRef.current) {\n      soundRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n  const nextSong = () => {\n    if (queue.length > 0) {\n      const nextSong = queue[0];\n      const newQueue = queue.slice(1);\n      setQueue(newQueue);\n      playSong(nextSong);\n    } else {\n      cleanupSound();\n      setCurrentSong(null);\n      setIsPlaying(false);\n    }\n  };\n  const prevSong = () => {\n    if (currentTime > 3) {\n      // If current song has played for more than 3 seconds, restart it\n      seekTo(0);\n    } else if (currentSong) {\n      // Otherwise go to previous song if exists\n      // In a real app, you would have a history queue to go back\n      pauseSong();\n      setCurrentTime(0);\n    }\n  };\n  const setVolume = newVolume => {\n    setVolumeState(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n  const seekTo = time => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n  const addToQueue = song => {\n    setQueue([...queue, song]);\n  };\n  const removeFromQueue = index => {\n    const newQueue = [...queue];\n    newQueue.splice(index, 1);\n    setQueue(newQueue);\n  };\n  const clearQueue = () => {\n    setQueue([]);\n  };\n  useEffect(() => {\n    return () => {\n      cleanupSound();\n    };\n  }, []);\n  const value = {\n    currentSong,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    playSong,\n    pauseSong,\n    resumeSong,\n    nextSong,\n    prevSong,\n    setVolume,\n    seekTo,\n    addToQueue,\n    removeFromQueue,\n    clearQueue\n  };\n  return /*#__PURE__*/_jsxDEV(MusicPlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicPlayerProvider, \"luoW58ttp3BsUs4x3FP9gWDOT94=\");\n_c = MusicPlayerProvider;\nexport const useMusicPlayer = () => {\n  _s2();\n  const context = useContext(MusicPlayerContext);\n  if (context === undefined) {\n    throw new Error('useMusicPlayer must be used within a MusicPlayerProvider');\n  }\n  return context;\n};\n_s2(useMusicPlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MusicPlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","Howl","jsxDEV","_jsxDEV","MusicPlayerContext","undefined","MusicPlayerProvider","children","_s","currentSong","setCurrentSong","isPlaying","setIsPlaying","volume","setVolumeState","currentTime","setCurrentTime","duration","setDuration","queue","setQueue","soundRef","intervalRef","cleanupSound","current","stop","unload","clearInterval","startTimer","setInterval","playing","seconds","seek","playSong","song","downloadUrl","length","console","error","url","src","html5","onplay","onend","nextSong","onload","_soundRef$current","onpause","onstop","play","pauseSong","_soundRef$current2","pause","resumeSong","newQueue","slice","prevSong","seekTo","setVolume","newVolume","time","addToQueue","removeFromQueue","index","splice","clearQueue","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMusicPlayer","_s2","context","Error","$RefreshReg$"],"sources":["/home/m0nster/Desktop/Code/Test/saavn-music-app/src/context/MusicPlayerContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { Howl } from 'howler';\nimport { Song } from '../types';\n\ninterface MusicPlayerContextType {\n  currentSong: Song | null;\n  isPlaying: boolean;\n  volume: number;\n  currentTime: number;\n  duration: number;\n  queue: Song[];\n  playSong: (song: Song) => void;\n  pauseSong: () => void;\n  resumeSong: () => void;\n  nextSong: () => void;\n  prevSong: () => void;\n  setVolume: (volume: number) => void;\n  seekTo: (time: number) => void;\n  addToQueue: (song: Song) => void;\n  removeFromQueue: (index: number) => void;\n  clearQueue: () => void;\n}\n\nconst MusicPlayerContext = createContext<MusicPlayerContextType | undefined>(undefined);\n\nexport const MusicPlayerProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [currentSong, setCurrentSong] = useState<Song | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [volume, setVolumeState] = useState<number>(0.7);\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const [duration, setDuration] = useState<number>(0);\n  const [queue, setQueue] = useState<Song[]>([]);\n  const soundRef = useRef<Howl | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const cleanupSound = () => {\n    if (soundRef.current) {\n      soundRef.current.stop();\n      soundRef.current.unload();\n      soundRef.current = null;\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  const startTimer = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        const seconds = soundRef.current.seek();\n        setCurrentTime(seconds);\n      }\n    }, 1000);\n  };\n\n  const playSong = (song: Song) => {\n    cleanupSound();\n    \n    // Check if downloadUrl exists and has length\n    if (!song.downloadUrl || song.downloadUrl.length === 0) {\n      console.error('Song has no download URLs', song);\n      return;\n    }\n    \n    // Use highest quality URL\n    const url = song.downloadUrl[song.downloadUrl.length - 1].url;\n    \n    soundRef.current = new Howl({\n      src: [url],\n      html5: true,\n      volume: volume,\n      onplay: () => {\n        setIsPlaying(true);\n        startTimer();\n      },\n      onend: () => {\n        nextSong();\n      },\n      onload: () => {\n        setDuration(soundRef.current?.duration() || 0);\n      },\n      onpause: () => {\n        setIsPlaying(false);\n      },\n      onstop: () => {\n        setIsPlaying(false);\n      },\n    });\n\n    soundRef.current.play();\n    setCurrentSong(song);\n  };\n\n  const pauseSong = () => {\n    soundRef.current?.pause();\n    setIsPlaying(false);\n  };\n\n  const resumeSong = () => {\n    if (soundRef.current) {\n      soundRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n\n  const nextSong = () => {\n    if (queue.length > 0) {\n      const nextSong = queue[0];\n      const newQueue = queue.slice(1);\n      setQueue(newQueue);\n      playSong(nextSong);\n    } else {\n      cleanupSound();\n      setCurrentSong(null);\n      setIsPlaying(false);\n    }\n  };\n\n  const prevSong = () => {\n    if (currentTime > 3) {\n      // If current song has played for more than 3 seconds, restart it\n      seekTo(0);\n    } else if (currentSong) {\n      // Otherwise go to previous song if exists\n      // In a real app, you would have a history queue to go back\n      pauseSong();\n      setCurrentTime(0);\n    }\n  };\n\n  const setVolume = (newVolume: number) => {\n    setVolumeState(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n\n  const seekTo = (time: number) => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n\n  const addToQueue = (song: Song) => {\n    setQueue([...queue, song]);\n  };\n\n  const removeFromQueue = (index: number) => {\n    const newQueue = [...queue];\n    newQueue.splice(index, 1);\n    setQueue(newQueue);\n  };\n\n  const clearQueue = () => {\n    setQueue([]);\n  };\n\n  useEffect(() => {\n    return () => {\n      cleanupSound();\n    };\n  }, []);\n\n  const value = {\n    currentSong,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    playSong,\n    pauseSong,\n    resumeSong,\n    nextSong,\n    prevSong,\n    setVolume,\n    seekTo,\n    addToQueue,\n    removeFromQueue,\n    clearQueue,\n  };\n\n  return (\n    <MusicPlayerContext.Provider value={value}>\n      {children}\n    </MusicPlayerContext.Provider>\n  );\n};\n\nexport const useMusicPlayer = () => {\n  const context = useContext(MusicPlayerContext);\n  if (context === undefined) {\n    throw new Error('useMusicPlayer must be used within a MusicPlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}