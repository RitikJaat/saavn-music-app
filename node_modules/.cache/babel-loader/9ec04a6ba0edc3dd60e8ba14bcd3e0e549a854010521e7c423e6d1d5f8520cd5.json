{"ast":null,"code":"// Local storage keys\nconst KEYS = {\n  LIKED_SONGS: 'saavn_liked_songs',\n  SAVED_ALBUMS: 'saavn_saved_albums',\n  SAVED_PLAYLISTS: 'saavn_saved_playlists',\n  CUSTOM_PLAYLISTS: 'saavn_custom_playlists',\n  RECENTLY_PLAYED: 'saavn_recently_played'\n};\n\n// Maximum items to keep in storage\nconst MAX_ITEMS = {\n  LIKED_SONGS: 500,\n  SAVED_ALBUMS: 100,\n  SAVED_PLAYLISTS: 100,\n  CUSTOM_PLAYLISTS: 20,\n  RECENTLY_PLAYED: 50\n};\n\n// Helper function to get items from localStorage\nconst getFromStorage = key => {\n  try {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : [];\n  } catch (error) {\n    console.error(`Error retrieving ${key} from localStorage:`, error);\n    return [];\n  }\n};\n\n// Helper function to save items to localStorage\nconst saveToStorage = (key, items) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(items));\n  } catch (error) {\n    console.error(`Error saving ${key} to localStorage:`, error);\n  }\n};\n\n// Custom playlist interface with additional fields\n\n// Library Service API\nexport const LibraryService = {\n  // Liked Songs\n  getLikedSongs: () => {\n    return getFromStorage(KEYS.LIKED_SONGS);\n  },\n  addLikedSong: song => {\n    const likedSongs = LibraryService.getLikedSongs();\n    // Don't add duplicates\n    if (!likedSongs.some(s => s.id === song.id)) {\n      const newLikedSongs = [song, ...likedSongs].slice(0, MAX_ITEMS.LIKED_SONGS);\n      saveToStorage(KEYS.LIKED_SONGS, newLikedSongs);\n    }\n  },\n  removeLikedSong: songId => {\n    const likedSongs = LibraryService.getLikedSongs();\n    const filteredSongs = likedSongs.filter(song => song.id !== songId);\n    saveToStorage(KEYS.LIKED_SONGS, filteredSongs);\n  },\n  isLikedSong: songId => {\n    const likedSongs = LibraryService.getLikedSongs();\n    return likedSongs.some(song => song.id === songId);\n  },\n  // Saved Albums\n  getSavedAlbums: () => {\n    return getFromStorage(KEYS.SAVED_ALBUMS);\n  },\n  addSavedAlbum: album => {\n    const savedAlbums = LibraryService.getSavedAlbums();\n    if (!savedAlbums.some(a => a.id === album.id)) {\n      const newSavedAlbums = [album, ...savedAlbums].slice(0, MAX_ITEMS.SAVED_ALBUMS);\n      saveToStorage(KEYS.SAVED_ALBUMS, newSavedAlbums);\n    }\n  },\n  removeSavedAlbum: albumId => {\n    const savedAlbums = LibraryService.getSavedAlbums();\n    const filteredAlbums = savedAlbums.filter(album => album.id !== albumId);\n    saveToStorage(KEYS.SAVED_ALBUMS, filteredAlbums);\n  },\n  isSavedAlbum: albumId => {\n    const savedAlbums = LibraryService.getSavedAlbums();\n    return savedAlbums.some(album => album.id === albumId);\n  },\n  // Saved Playlists from API\n  getSavedPlaylists: () => {\n    return getFromStorage(KEYS.SAVED_PLAYLISTS);\n  },\n  addSavedPlaylist: playlist => {\n    const savedPlaylists = LibraryService.getSavedPlaylists();\n    if (!savedPlaylists.some(p => p.id === playlist.id)) {\n      const newSavedPlaylists = [playlist, ...savedPlaylists].slice(0, MAX_ITEMS.SAVED_PLAYLISTS);\n      saveToStorage(KEYS.SAVED_PLAYLISTS, newSavedPlaylists);\n    }\n  },\n  removeSavedPlaylist: playlistId => {\n    const savedPlaylists = LibraryService.getSavedPlaylists();\n    const filteredPlaylists = savedPlaylists.filter(playlist => playlist.id !== playlistId);\n    saveToStorage(KEYS.SAVED_PLAYLISTS, filteredPlaylists);\n  },\n  isSavedPlaylist: playlistId => {\n    const savedPlaylists = LibraryService.getSavedPlaylists();\n    return savedPlaylists.some(playlist => playlist.id === playlistId);\n  },\n  // Custom User-Created Playlists\n  getCustomPlaylists: () => {\n    return getFromStorage(KEYS.CUSTOM_PLAYLISTS);\n  },\n  getCustomPlaylist: playlistId => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    return customPlaylists.find(playlist => playlist.id === playlistId) || null;\n  },\n  createCustomPlaylist: (name, description = '') => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n\n    // Generate a unique ID\n    const newId = `custom_${Date.now()}`;\n    const newPlaylist = {\n      id: newId,\n      name,\n      title: name,\n      description,\n      image: undefined,\n      // Will be updated when songs are added\n      songs: [],\n      songCount: 0,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      isCustom: true,\n      followers: '0'\n    };\n    const updatedPlaylists = [newPlaylist, ...customPlaylists].slice(0, MAX_ITEMS.CUSTOM_PLAYLISTS);\n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, updatedPlaylists);\n    return newPlaylist;\n  },\n  updateCustomPlaylist: (playlistId, updates) => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const index = customPlaylists.findIndex(p => p.id === playlistId);\n    if (index === -1) return null;\n    const updatedPlaylist = {\n      ...customPlaylists[index],\n      ...updates,\n      title: updates.name || customPlaylists[index].name,\n      updatedAt: Date.now()\n    };\n    customPlaylists[index] = updatedPlaylist;\n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, customPlaylists);\n    return updatedPlaylist;\n  },\n  deleteCustomPlaylist: playlistId => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const filteredPlaylists = customPlaylists.filter(p => p.id !== playlistId);\n    if (filteredPlaylists.length === customPlaylists.length) {\n      return false; // Playlist not found\n    }\n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, filteredPlaylists);\n    return true;\n  },\n  addSongToCustomPlaylist: (playlistId, song) => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const index = customPlaylists.findIndex(p => p.id === playlistId);\n    if (index === -1) return false;\n    const playlist = customPlaylists[index];\n\n    // Don't add duplicate songs\n    if (playlist.songs.some(s => s.id === song.id)) {\n      return true; // Already exists, consider it a success\n    }\n\n    // Add song to playlist\n    playlist.songs = [song, ...playlist.songs];\n    playlist.songCount = playlist.songs.length;\n    playlist.updatedAt = Date.now();\n\n    // If this is the first song, use its image as playlist image\n    if (playlist.songs.length === 1 && song.image) {\n      playlist.image = song.image;\n    }\n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, customPlaylists);\n    return true;\n  },\n  removeSongFromCustomPlaylist: (playlistId, songId) => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const index = customPlaylists.findIndex(p => p.id === playlistId);\n    if (index === -1) return false;\n    const playlist = customPlaylists[index];\n    const originalLength = playlist.songs.length;\n    playlist.songs = playlist.songs.filter(song => song.id !== songId);\n    playlist.songCount = playlist.songs.length;\n    playlist.updatedAt = Date.now();\n\n    // Update playlist image if we removed the song that was used for the image\n    if (playlist.songs.length > 0 && playlist.songs.length !== originalLength) {\n      playlist.image = playlist.songs[0].image;\n    }\n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, customPlaylists);\n    return playlist.songs.length !== originalLength;\n  },\n  // Recently Played\n  getRecentlyPlayed: () => {\n    return getFromStorage(KEYS.RECENTLY_PLAYED);\n  },\n  addToRecentlyPlayed: song => {\n    const recentlyPlayed = LibraryService.getRecentlyPlayed();\n    // Remove if already exists (to put it at the top)\n    const filteredSongs = recentlyPlayed.filter(s => s.id !== song.id);\n    const newRecentlyPlayed = [song, ...filteredSongs].slice(0, MAX_ITEMS.RECENTLY_PLAYED);\n    saveToStorage(KEYS.RECENTLY_PLAYED, newRecentlyPlayed);\n  },\n  clearRecentlyPlayed: () => {\n    saveToStorage(KEYS.RECENTLY_PLAYED, []);\n  }\n};\nexport default LibraryService;","map":{"version":3,"names":["KEYS","LIKED_SONGS","SAVED_ALBUMS","SAVED_PLAYLISTS","CUSTOM_PLAYLISTS","RECENTLY_PLAYED","MAX_ITEMS","getFromStorage","key","data","localStorage","getItem","JSON","parse","error","console","saveToStorage","items","setItem","stringify","LibraryService","getLikedSongs","addLikedSong","song","likedSongs","some","s","id","newLikedSongs","slice","removeLikedSong","songId","filteredSongs","filter","isLikedSong","getSavedAlbums","addSavedAlbum","album","savedAlbums","a","newSavedAlbums","removeSavedAlbum","albumId","filteredAlbums","isSavedAlbum","getSavedPlaylists","addSavedPlaylist","playlist","savedPlaylists","p","newSavedPlaylists","removeSavedPlaylist","playlistId","filteredPlaylists","isSavedPlaylist","getCustomPlaylists","getCustomPlaylist","customPlaylists","find","createCustomPlaylist","name","description","newId","Date","now","newPlaylist","title","image","undefined","songs","songCount","createdAt","updatedAt","isCustom","followers","updatedPlaylists","updateCustomPlaylist","updates","index","findIndex","updatedPlaylist","deleteCustomPlaylist","length","addSongToCustomPlaylist","removeSongFromCustomPlaylist","originalLength","getRecentlyPlayed","addToRecentlyPlayed","recentlyPlayed","newRecentlyPlayed","clearRecentlyPlayed"],"sources":["/home/m0nster/Desktop/Code/Test/saavn-music-app/src/services/libraryService.ts"],"sourcesContent":["import { Song, Album, Playlist } from '../types';\n\n// Local storage keys\nconst KEYS = {\n  LIKED_SONGS: 'saavn_liked_songs',\n  SAVED_ALBUMS: 'saavn_saved_albums',\n  SAVED_PLAYLISTS: 'saavn_saved_playlists',\n  CUSTOM_PLAYLISTS: 'saavn_custom_playlists',\n  RECENTLY_PLAYED: 'saavn_recently_played',\n};\n\n// Maximum items to keep in storage\nconst MAX_ITEMS = {\n  LIKED_SONGS: 500,\n  SAVED_ALBUMS: 100,\n  SAVED_PLAYLISTS: 100, \n  CUSTOM_PLAYLISTS: 20,\n  RECENTLY_PLAYED: 50,\n};\n\n// Helper function to get items from localStorage\nconst getFromStorage = <T>(key: string): T[] => {\n  try {\n    const data = localStorage.getItem(key);\n    return data ? JSON.parse(data) : [];\n  } catch (error) {\n    console.error(`Error retrieving ${key} from localStorage:`, error);\n    return [];\n  }\n};\n\n// Helper function to save items to localStorage\nconst saveToStorage = <T>(key: string, items: T[]): void => {\n  try {\n    localStorage.setItem(key, JSON.stringify(items));\n  } catch (error) {\n    console.error(`Error saving ${key} to localStorage:`, error);\n  }\n};\n\n// Custom playlist interface with additional fields\ninterface CustomPlaylist extends Omit<Playlist, 'songs'> {\n  createdAt: number;\n  updatedAt: number;\n  isCustom: boolean;\n  songs: Song[];\n  songCount?: number;\n}\n\n// Library Service API\nexport const LibraryService = {\n  // Liked Songs\n  getLikedSongs: (): Song[] => {\n    return getFromStorage<Song>(KEYS.LIKED_SONGS);\n  },\n  \n  addLikedSong: (song: Song): void => {\n    const likedSongs = LibraryService.getLikedSongs();\n    // Don't add duplicates\n    if (!likedSongs.some(s => s.id === song.id)) {\n      const newLikedSongs = [song, ...likedSongs].slice(0, MAX_ITEMS.LIKED_SONGS);\n      saveToStorage(KEYS.LIKED_SONGS, newLikedSongs);\n    }\n  },\n  \n  removeLikedSong: (songId: string): void => {\n    const likedSongs = LibraryService.getLikedSongs();\n    const filteredSongs = likedSongs.filter(song => song.id !== songId);\n    saveToStorage(KEYS.LIKED_SONGS, filteredSongs);\n  },\n  \n  isLikedSong: (songId: string): boolean => {\n    const likedSongs = LibraryService.getLikedSongs();\n    return likedSongs.some(song => song.id === songId);\n  },\n  \n  // Saved Albums\n  getSavedAlbums: (): Album[] => {\n    return getFromStorage<Album>(KEYS.SAVED_ALBUMS);\n  },\n  \n  addSavedAlbum: (album: Album): void => {\n    const savedAlbums = LibraryService.getSavedAlbums();\n    if (!savedAlbums.some(a => a.id === album.id)) {\n      const newSavedAlbums = [album, ...savedAlbums].slice(0, MAX_ITEMS.SAVED_ALBUMS);\n      saveToStorage(KEYS.SAVED_ALBUMS, newSavedAlbums);\n    }\n  },\n  \n  removeSavedAlbum: (albumId: string): void => {\n    const savedAlbums = LibraryService.getSavedAlbums();\n    const filteredAlbums = savedAlbums.filter(album => album.id !== albumId);\n    saveToStorage(KEYS.SAVED_ALBUMS, filteredAlbums);\n  },\n  \n  isSavedAlbum: (albumId: string): boolean => {\n    const savedAlbums = LibraryService.getSavedAlbums();\n    return savedAlbums.some(album => album.id === albumId);\n  },\n  \n  // Saved Playlists from API\n  getSavedPlaylists: (): Playlist[] => {\n    return getFromStorage<Playlist>(KEYS.SAVED_PLAYLISTS);\n  },\n  \n  addSavedPlaylist: (playlist: Playlist): void => {\n    const savedPlaylists = LibraryService.getSavedPlaylists();\n    if (!savedPlaylists.some(p => p.id === playlist.id)) {\n      const newSavedPlaylists = [playlist, ...savedPlaylists].slice(0, MAX_ITEMS.SAVED_PLAYLISTS);\n      saveToStorage(KEYS.SAVED_PLAYLISTS, newSavedPlaylists);\n    }\n  },\n  \n  removeSavedPlaylist: (playlistId: string): void => {\n    const savedPlaylists = LibraryService.getSavedPlaylists();\n    const filteredPlaylists = savedPlaylists.filter(playlist => playlist.id !== playlistId);\n    saveToStorage(KEYS.SAVED_PLAYLISTS, filteredPlaylists);\n  },\n  \n  isSavedPlaylist: (playlistId: string): boolean => {\n    const savedPlaylists = LibraryService.getSavedPlaylists();\n    return savedPlaylists.some(playlist => playlist.id === playlistId);\n  },\n  \n  // Custom User-Created Playlists\n  getCustomPlaylists: (): CustomPlaylist[] => {\n    return getFromStorage<CustomPlaylist>(KEYS.CUSTOM_PLAYLISTS);\n  },\n  \n  getCustomPlaylist: (playlistId: string): CustomPlaylist | null => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    return customPlaylists.find(playlist => playlist.id === playlistId) || null;\n  },\n  \n  createCustomPlaylist: (name: string, description: string = ''): CustomPlaylist => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    \n    // Generate a unique ID\n    const newId = `custom_${Date.now()}`;\n    \n    const newPlaylist: CustomPlaylist = {\n      id: newId,\n      name,\n      title: name,\n      description,\n      image: undefined, // Will be updated when songs are added\n      songs: [],\n      songCount: 0,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      isCustom: true,\n      followers: '0'\n    };\n    \n    const updatedPlaylists = [newPlaylist, ...customPlaylists].slice(0, MAX_ITEMS.CUSTOM_PLAYLISTS);\n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, updatedPlaylists);\n    \n    return newPlaylist;\n  },\n  \n  updateCustomPlaylist: (\n    playlistId: string, \n    updates: Partial<Pick<CustomPlaylist, 'name' | 'description'>>\n  ): CustomPlaylist | null => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const index = customPlaylists.findIndex(p => p.id === playlistId);\n    \n    if (index === -1) return null;\n    \n    const updatedPlaylist = {\n      ...customPlaylists[index],\n      ...updates,\n      title: updates.name || customPlaylists[index].name,\n      updatedAt: Date.now()\n    };\n    \n    customPlaylists[index] = updatedPlaylist;\n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, customPlaylists);\n    \n    return updatedPlaylist;\n  },\n  \n  deleteCustomPlaylist: (playlistId: string): boolean => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const filteredPlaylists = customPlaylists.filter(p => p.id !== playlistId);\n    \n    if (filteredPlaylists.length === customPlaylists.length) {\n      return false; // Playlist not found\n    }\n    \n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, filteredPlaylists);\n    return true;\n  },\n  \n  addSongToCustomPlaylist: (playlistId: string, song: Song): boolean => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const index = customPlaylists.findIndex(p => p.id === playlistId);\n    \n    if (index === -1) return false;\n    \n    const playlist = customPlaylists[index];\n    \n    // Don't add duplicate songs\n    if (playlist.songs.some(s => s.id === song.id)) {\n      return true; // Already exists, consider it a success\n    }\n    \n    // Add song to playlist\n    playlist.songs = [song, ...playlist.songs];\n    playlist.songCount = playlist.songs.length;\n    playlist.updatedAt = Date.now();\n    \n    // If this is the first song, use its image as playlist image\n    if (playlist.songs.length === 1 && song.image) {\n      playlist.image = song.image;\n    }\n    \n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, customPlaylists);\n    return true;\n  },\n  \n  removeSongFromCustomPlaylist: (playlistId: string, songId: string): boolean => {\n    const customPlaylists = LibraryService.getCustomPlaylists();\n    const index = customPlaylists.findIndex(p => p.id === playlistId);\n    \n    if (index === -1) return false;\n    \n    const playlist = customPlaylists[index];\n    const originalLength = playlist.songs.length;\n    \n    playlist.songs = playlist.songs.filter(song => song.id !== songId);\n    playlist.songCount = playlist.songs.length;\n    playlist.updatedAt = Date.now();\n    \n    // Update playlist image if we removed the song that was used for the image\n    if (playlist.songs.length > 0 && playlist.songs.length !== originalLength) {\n      playlist.image = playlist.songs[0].image;\n    }\n    \n    saveToStorage(KEYS.CUSTOM_PLAYLISTS, customPlaylists);\n    return playlist.songs.length !== originalLength;\n  },\n  \n  // Recently Played\n  getRecentlyPlayed: (): Song[] => {\n    return getFromStorage<Song>(KEYS.RECENTLY_PLAYED);\n  },\n  \n  addToRecentlyPlayed: (song: Song): void => {\n    const recentlyPlayed = LibraryService.getRecentlyPlayed();\n    // Remove if already exists (to put it at the top)\n    const filteredSongs = recentlyPlayed.filter(s => s.id !== song.id);\n    const newRecentlyPlayed = [song, ...filteredSongs].slice(0, MAX_ITEMS.RECENTLY_PLAYED);\n    saveToStorage(KEYS.RECENTLY_PLAYED, newRecentlyPlayed);\n  },\n  \n  clearRecentlyPlayed: (): void => {\n    saveToStorage(KEYS.RECENTLY_PLAYED, []);\n  }\n};\n\nexport default LibraryService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}