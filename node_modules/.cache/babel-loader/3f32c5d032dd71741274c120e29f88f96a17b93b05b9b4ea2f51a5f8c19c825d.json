{"ast":null,"code":"var _jsxFileName = \"/home/m0nster/Desktop/Code/Test/saavn-music-app/src/context/MusicPlayerContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { Howl } from 'howler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MusicPlayerContext = /*#__PURE__*/createContext(undefined);\nexport const MusicPlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [currentSong, setCurrentSong] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [volume, setVolumeState] = useState(0.7);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [queue, setQueue] = useState([]);\n  const [queueHistory, setQueueHistory] = useState([]);\n  const soundRef = useRef(null);\n  const intervalRef = useRef(null);\n\n  // Keep track if we're manually skipping or song ended naturally\n  const isAutoPlayingRef = useRef(false);\n  const cleanupSound = () => {\n    if (soundRef.current) {\n      soundRef.current.stop();\n      soundRef.current.unload();\n      soundRef.current = null;\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n  const startTimer = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        const seconds = soundRef.current.seek();\n        setCurrentTime(seconds);\n      }\n    }, 1000);\n  };\n  const playSong = song => {\n    cleanupSound();\n\n    // Add current song to history if exists\n    if (currentSong) {\n      setQueueHistory(prev => [currentSong, ...prev.slice(0, 19)]); // Keep last 20 songs\n    }\n\n    // Check if downloadUrl exists and has length\n    if (!song.downloadUrl || song.downloadUrl.length === 0) {\n      console.error('Song has no download URLs', song);\n      // Try to play next song if this one fails\n      if (queue.length > 0) {\n        const nextSong = queue[0];\n        setQueue(queue.slice(1));\n        playSong(nextSong);\n      }\n      return;\n    }\n\n    // Use highest quality URL\n    const url = song.downloadUrl[song.downloadUrl.length - 1].url;\n    soundRef.current = new Howl({\n      src: [url],\n      html5: true,\n      volume: volume,\n      onplay: () => {\n        setIsPlaying(true);\n        startTimer();\n      },\n      onend: () => {\n        isAutoPlayingRef.current = true;\n        nextSong();\n      },\n      onload: () => {\n        var _soundRef$current;\n        setDuration(((_soundRef$current = soundRef.current) === null || _soundRef$current === void 0 ? void 0 : _soundRef$current.duration()) || 0);\n      },\n      onpause: () => {\n        setIsPlaying(false);\n      },\n      onstop: () => {\n        setIsPlaying(false);\n      },\n      onloaderror: () => {\n        console.error('Error loading song', song);\n        // Auto skip to next song on error\n        if (queue.length > 0) {\n          const nextSong = queue[0];\n          setQueue(queue.slice(1));\n          playSong(nextSong);\n        }\n      }\n    });\n    soundRef.current.play();\n    setCurrentSong(song);\n  };\n  const pauseSong = () => {\n    var _soundRef$current2;\n    (_soundRef$current2 = soundRef.current) === null || _soundRef$current2 === void 0 ? void 0 : _soundRef$current2.pause();\n    setIsPlaying(false);\n  };\n  const resumeSong = () => {\n    if (soundRef.current) {\n      soundRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n  const nextSong = () => {\n    const wasAutoPlaying = isAutoPlayingRef.current;\n    isAutoPlayingRef.current = false;\n    if (queue.length > 0) {\n      const nextSong = queue[0];\n      const newQueue = queue.slice(1);\n      setQueue(newQueue);\n      playSong(nextSong);\n    } else if (wasAutoPlaying) {\n      // If auto-playing reached the end of queue, reset everything\n      cleanupSound();\n      setCurrentSong(null);\n      setIsPlaying(false);\n      setCurrentTime(0);\n    }\n  };\n  const prevSong = () => {\n    if (currentTime > 3) {\n      // If current song has played for more than 3 seconds, restart it\n      seekTo(0);\n    } else if (queueHistory.length > 0) {\n      // Go to the previous song in history\n      const prevSong = queueHistory[0];\n      const newHistory = queueHistory.slice(1);\n\n      // Add current song to the front of the queue\n      if (currentSong) {\n        setQueue([currentSong, ...queue]);\n      }\n      setQueueHistory(newHistory);\n      playSong(prevSong);\n    } else {\n      // Just restart the current song\n      seekTo(0);\n    }\n  };\n  const setVolume = newVolume => {\n    setVolumeState(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n  const seekTo = time => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n  const addToQueue = song => {\n    setQueue(prevQueue => [...prevQueue, song]);\n  };\n  const addMultipleToQueue = songs => {\n    if (songs.length === 0) return;\n    setQueue(prevQueue => [...prevQueue, ...songs]);\n\n    // If nothing is playing, start playing the first song\n    if (!currentSong && songs.length > 0) {\n      playSong(songs[0]);\n      setQueue(prevQueue => songs.length > 1 ? [...prevQueue.slice(1)] : prevQueue);\n    }\n  };\n  const removeFromQueue = index => {\n    setQueue(prevQueue => {\n      const newQueue = [...prevQueue];\n      newQueue.splice(index, 1);\n      return newQueue;\n    });\n  };\n  const clearQueue = () => {\n    setQueue([]);\n  };\n  useEffect(() => {\n    return () => {\n      cleanupSound();\n    };\n  }, []);\n  const value = {\n    currentSong,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    playSong,\n    pauseSong,\n    resumeSong,\n    nextSong,\n    prevSong,\n    setVolume,\n    seekTo,\n    addToQueue,\n    addMultipleToQueue,\n    removeFromQueue,\n    clearQueue,\n    queueHistory\n  };\n  return /*#__PURE__*/_jsxDEV(MusicPlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n};\n_s(MusicPlayerProvider, \"8+irgE2RP7QXBdh1VXb7MUH9zE4=\");\n_c = MusicPlayerProvider;\nexport const useMusicPlayer = () => {\n  _s2();\n  const context = useContext(MusicPlayerContext);\n  if (context === undefined) {\n    throw new Error('useMusicPlayer must be used within a MusicPlayerProvider');\n  }\n  return context;\n};\n_s2(useMusicPlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"MusicPlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useRef","Howl","jsxDEV","_jsxDEV","MusicPlayerContext","undefined","MusicPlayerProvider","children","_s","currentSong","setCurrentSong","isPlaying","setIsPlaying","volume","setVolumeState","currentTime","setCurrentTime","duration","setDuration","queue","setQueue","queueHistory","setQueueHistory","soundRef","intervalRef","isAutoPlayingRef","cleanupSound","current","stop","unload","clearInterval","startTimer","setInterval","playing","seconds","seek","playSong","song","prev","slice","downloadUrl","length","console","error","nextSong","url","src","html5","onplay","onend","onload","_soundRef$current","onpause","onstop","onloaderror","play","pauseSong","_soundRef$current2","pause","resumeSong","wasAutoPlaying","newQueue","prevSong","seekTo","newHistory","setVolume","newVolume","time","addToQueue","prevQueue","addMultipleToQueue","songs","removeFromQueue","index","splice","clearQueue","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useMusicPlayer","_s2","context","Error","$RefreshReg$"],"sources":["/home/m0nster/Desktop/Code/Test/saavn-music-app/src/context/MusicPlayerContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useRef } from 'react';\nimport { Howl } from 'howler';\nimport { Song } from '../types';\n\ninterface MusicPlayerContextType {\n  currentSong: Song | null;\n  isPlaying: boolean;\n  volume: number;\n  currentTime: number;\n  duration: number;\n  queue: Song[];\n  playSong: (song: Song) => void;\n  pauseSong: () => void;\n  resumeSong: () => void;\n  nextSong: () => void;\n  prevSong: () => void;\n  setVolume: (volume: number) => void;\n  seekTo: (time: number) => void;\n  addToQueue: (song: Song) => void;\n  addMultipleToQueue: (songs: Song[]) => void;\n  removeFromQueue: (index: number) => void;\n  clearQueue: () => void;\n  queueHistory: Song[];\n}\n\nconst MusicPlayerContext = createContext<MusicPlayerContextType | undefined>(undefined);\n\nexport const MusicPlayerProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [currentSong, setCurrentSong] = useState<Song | null>(null);\n  const [isPlaying, setIsPlaying] = useState<boolean>(false);\n  const [volume, setVolumeState] = useState<number>(0.7);\n  const [currentTime, setCurrentTime] = useState<number>(0);\n  const [duration, setDuration] = useState<number>(0);\n  const [queue, setQueue] = useState<Song[]>([]);\n  const [queueHistory, setQueueHistory] = useState<Song[]>([]);\n  const soundRef = useRef<Howl | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Keep track if we're manually skipping or song ended naturally\n  const isAutoPlayingRef = useRef<boolean>(false);\n\n  const cleanupSound = () => {\n    if (soundRef.current) {\n      soundRef.current.stop();\n      soundRef.current.unload();\n      soundRef.current = null;\n    }\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  };\n\n  const startTimer = () => {\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n\n    intervalRef.current = setInterval(() => {\n      if (soundRef.current && soundRef.current.playing()) {\n        const seconds = soundRef.current.seek();\n        setCurrentTime(seconds);\n      }\n    }, 1000);\n  };\n\n  const playSong = (song: Song) => {\n    cleanupSound();\n    \n    // Add current song to history if exists\n    if (currentSong) {\n      setQueueHistory(prev => [currentSong, ...prev.slice(0, 19)]); // Keep last 20 songs\n    }\n    \n    // Check if downloadUrl exists and has length\n    if (!song.downloadUrl || song.downloadUrl.length === 0) {\n      console.error('Song has no download URLs', song);\n      // Try to play next song if this one fails\n      if (queue.length > 0) {\n        const nextSong = queue[0];\n        setQueue(queue.slice(1));\n        playSong(nextSong);\n      }\n      return;\n    }\n    \n    // Use highest quality URL\n    const url = song.downloadUrl[song.downloadUrl.length - 1].url;\n    \n    soundRef.current = new Howl({\n      src: [url],\n      html5: true,\n      volume: volume,\n      onplay: () => {\n        setIsPlaying(true);\n        startTimer();\n      },\n      onend: () => {\n        isAutoPlayingRef.current = true;\n        nextSong();\n      },\n      onload: () => {\n        setDuration(soundRef.current?.duration() || 0);\n      },\n      onpause: () => {\n        setIsPlaying(false);\n      },\n      onstop: () => {\n        setIsPlaying(false);\n      },\n      onloaderror: () => {\n        console.error('Error loading song', song);\n        // Auto skip to next song on error\n        if (queue.length > 0) {\n          const nextSong = queue[0];\n          setQueue(queue.slice(1));\n          playSong(nextSong);\n        }\n      },\n    });\n\n    soundRef.current.play();\n    setCurrentSong(song);\n  };\n\n  const pauseSong = () => {\n    soundRef.current?.pause();\n    setIsPlaying(false);\n  };\n\n  const resumeSong = () => {\n    if (soundRef.current) {\n      soundRef.current.play();\n      setIsPlaying(true);\n    }\n  };\n\n  const nextSong = () => {\n    const wasAutoPlaying = isAutoPlayingRef.current;\n    isAutoPlayingRef.current = false;\n    \n    if (queue.length > 0) {\n      const nextSong = queue[0];\n      const newQueue = queue.slice(1);\n      setQueue(newQueue);\n      playSong(nextSong);\n    } else if (wasAutoPlaying) {\n      // If auto-playing reached the end of queue, reset everything\n      cleanupSound();\n      setCurrentSong(null);\n      setIsPlaying(false);\n      setCurrentTime(0);\n    }\n  };\n\n  const prevSong = () => {\n    if (currentTime > 3) {\n      // If current song has played for more than 3 seconds, restart it\n      seekTo(0);\n    } else if (queueHistory.length > 0) {\n      // Go to the previous song in history\n      const prevSong = queueHistory[0];\n      const newHistory = queueHistory.slice(1);\n      \n      // Add current song to the front of the queue\n      if (currentSong) {\n        setQueue([currentSong, ...queue]);\n      }\n      \n      setQueueHistory(newHistory);\n      playSong(prevSong);\n    } else {\n      // Just restart the current song\n      seekTo(0);\n    }\n  };\n\n  const setVolume = (newVolume: number) => {\n    setVolumeState(newVolume);\n    if (soundRef.current) {\n      soundRef.current.volume(newVolume);\n    }\n  };\n\n  const seekTo = (time: number) => {\n    if (soundRef.current) {\n      soundRef.current.seek(time);\n      setCurrentTime(time);\n    }\n  };\n\n  const addToQueue = (song: Song) => {\n    setQueue(prevQueue => [...prevQueue, song]);\n  };\n  \n  const addMultipleToQueue = (songs: Song[]) => {\n    if (songs.length === 0) return;\n    \n    setQueue(prevQueue => [...prevQueue, ...songs]);\n    \n    // If nothing is playing, start playing the first song\n    if (!currentSong && songs.length > 0) {\n      playSong(songs[0]);\n      setQueue(prevQueue => (songs.length > 1 ? [...prevQueue.slice(1)] : prevQueue));\n    }\n  };\n\n  const removeFromQueue = (index: number) => {\n    setQueue(prevQueue => {\n      const newQueue = [...prevQueue];\n    newQueue.splice(index, 1);\n      return newQueue;\n    });\n  };\n\n  const clearQueue = () => {\n    setQueue([]);\n  };\n\n  useEffect(() => {\n    return () => {\n      cleanupSound();\n    };\n  }, []);\n\n  const value = {\n    currentSong,\n    isPlaying,\n    volume,\n    currentTime,\n    duration,\n    queue,\n    playSong,\n    pauseSong,\n    resumeSong,\n    nextSong,\n    prevSong,\n    setVolume,\n    seekTo,\n    addToQueue,\n    addMultipleToQueue,\n    removeFromQueue,\n    clearQueue,\n    queueHistory\n  };\n\n  return (\n    <MusicPlayerContext.Provider value={value}>\n      {children}\n    </MusicPlayerContext.Provider>\n  );\n};\n\nexport const useMusicPlayer = () => {\n  const context = useContext(MusicPlayerContext);\n  if (context === undefined) {\n    throw new Error('useMusicPlayer must be used within a MusicPlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}