{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://saavn.dev/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const searchAll = async query => {\n  try {\n    const response = await api.get(`/search`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error searching:', error);\n    return {};\n  }\n};\nexport const searchSongs = async query => {\n  try {\n    const response = await api.get(`/search/songs`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching songs:', error);\n    return [];\n  }\n};\nexport const searchAlbums = async query => {\n  try {\n    const response = await api.get(`/search/albums`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching albums:', error);\n    return [];\n  }\n};\nexport const searchArtists = async query => {\n  try {\n    const response = await api.get(`/search/artists`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching artists:', error);\n    return [];\n  }\n};\nexport const getSongDetails = async id => {\n  try {\n    const response = await api.get(`/songs`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data[0];\n  } catch (error) {\n    console.error('Error getting song details:', error);\n    return null;\n  }\n};\nexport const getAlbumDetails = async id => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting album details:', error);\n    return null;\n  }\n};\nexport const getAlbumSongs = async id => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data.songs;\n  } catch (error) {\n    console.error('Error getting album songs:', error);\n    return [];\n  }\n};\nexport const getArtistDetails = async id => {\n  try {\n    const response = await api.get(`/artists`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting artist details:', error);\n    return null;\n  }\n};\nexport const getArtistSongs = async id => {\n  try {\n    const response = await api.get(`/artists/${id}/songs`, {\n      params: {\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error getting artist songs:', error);\n    return [];\n  }\n};\nexport const getTrendingSongs = async () => {\n  try {\n    var _response$data$data$t, _response$data$data$t2, _response$data$data$t3;\n    const response = await api.get('/modules?language=hindi');\n    const trendingSongs = ((_response$data$data$t = response.data.data.trending) === null || _response$data$data$t === void 0 ? void 0 : (_response$data$data$t2 = _response$data$data$t.songs) === null || _response$data$data$t2 === void 0 ? void 0 : (_response$data$data$t3 = _response$data$data$t2.find(section => section.title === 'Trending Songs')) === null || _response$data$data$t3 === void 0 ? void 0 : _response$data$data$t3.contents) || [];\n    return trendingSongs.slice(0, 50); // Limit to 50 songs\n  } catch (error) {\n    console.error('Error getting trending songs:', error);\n    return [];\n  }\n};\nexport const searchPlaylists = async (query, limit = 50) => {\n  try {\n    const response = await api.get(`/search/playlists`, {\n      params: {\n        query,\n        limit,\n        page: 1\n      }\n    });\n    return response.data.data.results || [];\n  } catch (error) {\n    console.error('Error searching playlists:', error);\n    return [];\n  }\n};\nexport const getPlaylistDetails = async id => {\n  try {\n    const response = await api.get(`/playlists`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting playlist details:', error);\n    return null;\n  }\n};\nexport const getPlaylistSongs = async id => {\n  try {\n    // First request to get initial songs and details\n    const initialResponse = await api.get(`/playlists`, {\n      params: {\n        id\n      }\n    });\n\n    // Check if we got valid data\n    if (!initialResponse.data.data) {\n      console.error(\"Invalid playlist data received\");\n      return [];\n    }\n\n    // Get songs from initial response\n    const initialSongs = initialResponse.data.data.songs || [];\n    console.log(`Initial songs loaded: ${initialSongs.length}`);\n\n    // Get total song count - some APIs use songCount, others might use count or total\n    const totalSongs = initialResponse.data.data.songCount || initialResponse.data.data.count || initialResponse.data.data.total || initialSongs.length;\n    console.log(`Total songs in playlist according to API: ${totalSongs}`);\n\n    // If we have all songs or no songs, return what we have\n    if (initialSongs.length >= totalSongs || initialSongs.length === 0) {\n      return initialSongs;\n    }\n\n    // If we need to fetch more songs, try a different approach\n    // Some APIs require a different endpoint for paginated songs\n    try {\n      const fullResponse = await api.get(`/playlists/${id}/songs`, {\n        params: {\n          limit: 100 // Try a larger limit\n        }\n      });\n      if (fullResponse.data.data && Array.isArray(fullResponse.data.data.songs)) {\n        const allSongs = fullResponse.data.data.songs;\n        console.log(`Fetched ${allSongs.length} songs using dedicated endpoint`);\n        return allSongs;\n      }\n    } catch (paginationError) {\n      console.log(\"Dedicated songs endpoint failed, falling back to manual pagination\");\n    }\n\n    // Manual pagination as fallback\n    let allSongs = [...initialSongs];\n    let page = 2;\n    let hasMoreSongs = true;\n\n    // Keep fetching until we have all songs or hit an error\n    while (hasMoreSongs && allSongs.length < totalSongs) {\n      try {\n        const response = await api.get(`/playlists`, {\n          params: {\n            id,\n            page\n          }\n        });\n        const pageSongs = response.data.data.songs || [];\n        console.log(`Page ${page} songs: ${pageSongs.length}`);\n        if (pageSongs.length === 0) {\n          // No more songs to fetch\n          hasMoreSongs = false;\n        } else {\n          // Add songs to our collection\n          allSongs = [...allSongs, ...pageSongs];\n          page++;\n        }\n      } catch (error) {\n        console.error(`Error fetching page ${page} of songs:`, error);\n        hasMoreSongs = false;\n      }\n    }\n    console.log(`Total songs loaded: ${allSongs.length}`);\n    return allSongs;\n  } catch (error) {\n    console.error('Error getting playlist songs:', error);\n    return [];\n  }\n};\n\n// Try direct JioSaavn playlist endpoint for all songs\nexport const getJioSaavnPlaylistSongs = async id => {\n  try {\n    // Try multiple endpoint patterns to get all songs\n    const endpoints = [`/playlists?id=${id}`, `/playlists/${id}`, `/playlists/${id}/songs?page=1&limit=300`];\n    let allSongs = [];\n    let success = false;\n\n    // Try each endpoint until we get a valid response\n    for (const endpoint of endpoints) {\n      try {\n        console.log(`Trying endpoint: ${endpoint}`);\n        const response = await api.get(endpoint);\n        if (response.data && response.data.data) {\n          const data = response.data.data;\n\n          // Check for songs in different possible response structures\n          if (Array.isArray(data.songs) && data.songs.length > 0) {\n            console.log(`Found ${data.songs.length} songs in response`);\n            allSongs = data.songs;\n            success = true;\n            break;\n          } else if (Array.isArray(data) && data.length > 0) {\n            console.log(`Found ${data.length} songs in response array`);\n            allSongs = data;\n            success = true;\n            break;\n          } else if (data.list && Array.isArray(data.list) && data.list.length > 0) {\n            console.log(`Found ${data.list.length} songs in list property`);\n            allSongs = data.list;\n            success = true;\n            break;\n          }\n        }\n      } catch (err) {\n        console.log(`Endpoint ${endpoint} failed`);\n      }\n    }\n    if (success) {\n      return allSongs;\n    } else {\n      // Fall back to regular method if none of our direct attempts worked\n      return getPlaylistSongs(id);\n    }\n  } catch (error) {\n    console.error('Error in direct playlist songs fetch:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","searchAll","query","response","get","params","limit","page","data","error","console","searchSongs","results","searchAlbums","searchArtists","getSongDetails","id","getAlbumDetails","getAlbumSongs","songs","getArtistDetails","getArtistSongs","getTrendingSongs","_response$data$data$t","_response$data$data$t2","_response$data$data$t3","trendingSongs","trending","find","section","title","contents","slice","searchPlaylists","getPlaylistDetails","getPlaylistSongs","initialResponse","initialSongs","log","length","totalSongs","songCount","count","total","fullResponse","Array","isArray","allSongs","paginationError","hasMoreSongs","pageSongs","getJioSaavnPlaylistSongs","endpoints","success","endpoint","list","err"],"sources":["/home/m0nster/Desktop/Code/Test/saavn-music-app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { SearchResults, Song, Album, Artist } from '../types';\n\nconst API_BASE_URL = 'https://saavn.dev/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const searchAll = async (query: string): Promise<SearchResults> => {\n  try {\n    const response = await api.get(`/search`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error searching:', error);\n    return {};\n  }\n};\n\nexport const searchSongs = async (query: string): Promise<Song[]> => {\n  try {\n    const response = await api.get(`/search/songs`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching songs:', error);\n    return [];\n  }\n};\n\nexport const searchAlbums = async (query: string): Promise<Album[]> => {\n  try {\n    const response = await api.get(`/search/albums`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching albums:', error);\n    return [];\n  }\n};\n\nexport const searchArtists = async (query: string): Promise<Artist[]> => {\n  try {\n    const response = await api.get(`/search/artists`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching artists:', error);\n    return [];\n  }\n};\n\nexport const getSongDetails = async (id: string): Promise<Song | null> => {\n  try {\n    const response = await api.get(`/songs`, {\n      params: { id }\n    });\n    return response.data.data[0];\n  } catch (error) {\n    console.error('Error getting song details:', error);\n    return null;\n  }\n};\n\nexport const getAlbumDetails = async (id: string): Promise<Album | null> => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: { id }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting album details:', error);\n    return null;\n  }\n};\n\nexport const getAlbumSongs = async (id: string): Promise<Song[]> => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: { id }\n    });\n    return response.data.data.songs;\n  } catch (error) {\n    console.error('Error getting album songs:', error);\n    return [];\n  }\n};\n\nexport const getArtistDetails = async (id: string): Promise<Artist | null> => {\n  try {\n    const response = await api.get(`/artists`, {\n      params: { id }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting artist details:', error);\n    return null;\n  }\n};\n\nexport const getArtistSongs = async (id: string): Promise<Song[]> => {\n  try {\n    const response = await api.get(`/artists/${id}/songs`, {\n      params: {\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error getting artist songs:', error);\n    return [];\n  }\n};\n\nexport const getTrendingSongs = async (): Promise<Song[]> => {\n  try {\n    const response = await api.get('/modules?language=hindi');\n    const trendingSongs = response.data.data.trending?.songs?.find((section: any) => \n      section.title === 'Trending Songs'\n    )?.contents || [];\n    return trendingSongs.slice(0, 50); // Limit to 50 songs\n  } catch (error) {\n    console.error('Error getting trending songs:', error);\n    return [];\n  }\n}; \n\nexport const searchPlaylists = async (query: string, limit: number = 50): Promise<any[]> => {\n  try {\n    const response = await api.get(`/search/playlists`, {\n      params: { \n        query,\n        limit,\n        page: 1\n      }\n    });\n    return response.data.data.results || [];\n  } catch (error) {\n    console.error('Error searching playlists:', error);\n    return [];\n  }\n}; \n\nexport const getPlaylistDetails = async (id: string): Promise<any> => {\n  try {\n    const response = await api.get(`/playlists`, {\n      params: { id }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting playlist details:', error);\n    return null;\n  }\n};\n\nexport const getPlaylistSongs = async (id: string): Promise<Song[]> => {\n  try {\n    // First request to get initial songs and details\n    const initialResponse = await api.get(`/playlists`, {\n      params: { id }\n    });\n    \n    // Check if we got valid data\n    if (!initialResponse.data.data) {\n      console.error(\"Invalid playlist data received\");\n      return [];\n    }\n    \n    // Get songs from initial response\n    const initialSongs = initialResponse.data.data.songs || [];\n    console.log(`Initial songs loaded: ${initialSongs.length}`);\n    \n    // Get total song count - some APIs use songCount, others might use count or total\n    const totalSongs = \n      initialResponse.data.data.songCount || \n      initialResponse.data.data.count || \n      initialResponse.data.data.total || \n      initialSongs.length;\n    \n    console.log(`Total songs in playlist according to API: ${totalSongs}`);\n    \n    // If we have all songs or no songs, return what we have\n    if (initialSongs.length >= totalSongs || initialSongs.length === 0) {\n      return initialSongs;\n    }\n    \n    // If we need to fetch more songs, try a different approach\n    // Some APIs require a different endpoint for paginated songs\n    try {\n      const fullResponse = await api.get(`/playlists/${id}/songs`, {\n        params: { \n          limit: 100  // Try a larger limit\n        }\n      });\n      \n      if (fullResponse.data.data && Array.isArray(fullResponse.data.data.songs)) {\n        const allSongs = fullResponse.data.data.songs;\n        console.log(`Fetched ${allSongs.length} songs using dedicated endpoint`);\n        return allSongs;\n      }\n    } catch (paginationError) {\n      console.log(\"Dedicated songs endpoint failed, falling back to manual pagination\");\n    }\n    \n    // Manual pagination as fallback\n    let allSongs = [...initialSongs];\n    let page = 2;\n    let hasMoreSongs = true;\n    \n    // Keep fetching until we have all songs or hit an error\n    while (hasMoreSongs && allSongs.length < totalSongs) {\n      try {\n        const response = await api.get(`/playlists`, {\n          params: { \n            id,\n            page\n          }\n        });\n        \n        const pageSongs = response.data.data.songs || [];\n        console.log(`Page ${page} songs: ${pageSongs.length}`);\n        \n        if (pageSongs.length === 0) {\n          // No more songs to fetch\n          hasMoreSongs = false;\n        } else {\n          // Add songs to our collection\n          allSongs = [...allSongs, ...pageSongs];\n          page++;\n        }\n      } catch (error) {\n        console.error(`Error fetching page ${page} of songs:`, error);\n        hasMoreSongs = false;\n      }\n    }\n    \n    console.log(`Total songs loaded: ${allSongs.length}`);\n    return allSongs;\n  } catch (error) {\n    console.error('Error getting playlist songs:', error);\n    return [];\n  }\n}; \n\n// Try direct JioSaavn playlist endpoint for all songs\nexport const getJioSaavnPlaylistSongs = async (id: string): Promise<Song[]> => {\n  try {\n    // Try multiple endpoint patterns to get all songs\n    const endpoints = [\n      `/playlists?id=${id}`,\n      `/playlists/${id}`,\n      `/playlists/${id}/songs?page=1&limit=300`\n    ];\n    \n    let allSongs: Song[] = [];\n    let success = false;\n    \n    // Try each endpoint until we get a valid response\n    for (const endpoint of endpoints) {\n      try {\n        console.log(`Trying endpoint: ${endpoint}`);\n        const response = await api.get(endpoint);\n        \n        if (response.data && response.data.data) {\n          const data = response.data.data;\n          \n          // Check for songs in different possible response structures\n          if (Array.isArray(data.songs) && data.songs.length > 0) {\n            console.log(`Found ${data.songs.length} songs in response`);\n            allSongs = data.songs;\n            success = true;\n            break;\n          } else if (Array.isArray(data) && data.length > 0) {\n            console.log(`Found ${data.length} songs in response array`);\n            allSongs = data;\n            success = true;\n            break;\n          } else if (data.list && Array.isArray(data.list) && data.list.length > 0) {\n            console.log(`Found ${data.list.length} songs in list property`);\n            allSongs = data.list;\n            success = true;\n            break;\n          }\n        }\n      } catch (err) {\n        console.log(`Endpoint ${endpoint} failed`);\n      }\n    }\n    \n    if (success) {\n      return allSongs;\n    } else {\n      // Fall back to regular method if none of our direct attempts worked\n      return getPlaylistSongs(id);\n    }\n  } catch (error) {\n    console.error('Error in direct playlist songs fetch:', error);\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}