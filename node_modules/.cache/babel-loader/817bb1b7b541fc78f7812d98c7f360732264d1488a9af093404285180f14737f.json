{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'https://saavn.dev/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const searchAll = async query => {\n  try {\n    const response = await api.get(`/search`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error searching:', error);\n    return {};\n  }\n};\nexport const searchSongs = async query => {\n  try {\n    const response = await api.get(`/search/songs`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching songs:', error);\n    return [];\n  }\n};\nexport const searchAlbums = async query => {\n  try {\n    const response = await api.get(`/search/albums`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching albums:', error);\n    return [];\n  }\n};\nexport const searchArtists = async query => {\n  try {\n    const response = await api.get(`/search/artists`, {\n      params: {\n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching artists:', error);\n    return [];\n  }\n};\nexport const getSongDetails = async id => {\n  try {\n    const response = await api.get(`/songs`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data[0];\n  } catch (error) {\n    console.error('Error getting song details:', error);\n    return null;\n  }\n};\nexport const getAlbumDetails = async id => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting album details:', error);\n    return null;\n  }\n};\nexport const getAlbumSongs = async id => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data.songs;\n  } catch (error) {\n    console.error('Error getting album songs:', error);\n    return [];\n  }\n};\nexport const getArtistDetails = async id => {\n  try {\n    const response = await api.get(`/artists`, {\n      params: {\n        id\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting artist details:', error);\n    return null;\n  }\n};\nexport const getArtistSongs = async id => {\n  try {\n    const response = await api.get(`/artists/${id}/songs`, {\n      params: {\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error getting artist songs:', error);\n    return [];\n  }\n};\nexport const getTrendingSongs = async () => {\n  try {\n    var _response$data$data$t, _response$data$data$t2, _response$data$data$t3;\n    const response = await api.get('/modules?language=hindi');\n    const trendingSongs = ((_response$data$data$t = response.data.data.trending) === null || _response$data$data$t === void 0 ? void 0 : (_response$data$data$t2 = _response$data$data$t.songs) === null || _response$data$data$t2 === void 0 ? void 0 : (_response$data$data$t3 = _response$data$data$t2.find(section => section.title === 'Trending Songs')) === null || _response$data$data$t3 === void 0 ? void 0 : _response$data$data$t3.contents) || [];\n    return trendingSongs.slice(0, 50); // Limit to 50 songs\n  } catch (error) {\n    console.error('Error getting trending songs:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","searchAll","query","response","get","params","limit","page","data","error","console","searchSongs","results","searchAlbums","searchArtists","getSongDetails","id","getAlbumDetails","getAlbumSongs","songs","getArtistDetails","getArtistSongs","getTrendingSongs","_response$data$data$t","_response$data$data$t2","_response$data$data$t3","trendingSongs","trending","find","section","title","contents","slice"],"sources":["/home/m0nster/Desktop/Code/Test/saavn-music-app/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { SearchResults, Song, Album, Artist } from '../types';\n\nconst API_BASE_URL = 'https://saavn.dev/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const searchAll = async (query: string): Promise<SearchResults> => {\n  try {\n    const response = await api.get(`/search`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error searching:', error);\n    return {};\n  }\n};\n\nexport const searchSongs = async (query: string): Promise<Song[]> => {\n  try {\n    const response = await api.get(`/search/songs`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching songs:', error);\n    return [];\n  }\n};\n\nexport const searchAlbums = async (query: string): Promise<Album[]> => {\n  try {\n    const response = await api.get(`/search/albums`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching albums:', error);\n    return [];\n  }\n};\n\nexport const searchArtists = async (query: string): Promise<Artist[]> => {\n  try {\n    const response = await api.get(`/search/artists`, {\n      params: { \n        query,\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error searching artists:', error);\n    return [];\n  }\n};\n\nexport const getSongDetails = async (id: string): Promise<Song | null> => {\n  try {\n    const response = await api.get(`/songs`, {\n      params: { id }\n    });\n    return response.data.data[0];\n  } catch (error) {\n    console.error('Error getting song details:', error);\n    return null;\n  }\n};\n\nexport const getAlbumDetails = async (id: string): Promise<Album | null> => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: { id }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting album details:', error);\n    return null;\n  }\n};\n\nexport const getAlbumSongs = async (id: string): Promise<Song[]> => {\n  try {\n    const response = await api.get(`/albums`, {\n      params: { id }\n    });\n    return response.data.data.songs;\n  } catch (error) {\n    console.error('Error getting album songs:', error);\n    return [];\n  }\n};\n\nexport const getArtistDetails = async (id: string): Promise<Artist | null> => {\n  try {\n    const response = await api.get(`/artists`, {\n      params: { id }\n    });\n    return response.data.data;\n  } catch (error) {\n    console.error('Error getting artist details:', error);\n    return null;\n  }\n};\n\nexport const getArtistSongs = async (id: string): Promise<Song[]> => {\n  try {\n    const response = await api.get(`/artists/${id}/songs`, {\n      params: {\n        limit: 50,\n        page: 1\n      }\n    });\n    return response.data.data.results;\n  } catch (error) {\n    console.error('Error getting artist songs:', error);\n    return [];\n  }\n};\n\nexport const getTrendingSongs = async (): Promise<Song[]> => {\n  try {\n    const response = await api.get('/modules?language=hindi');\n    const trendingSongs = response.data.data.trending?.songs?.find((section: any) => \n      section.title === 'Trending Songs'\n    )?.contents || [];\n    return trendingSongs.slice(0, 50); // Limit to 50 songs\n  } catch (error) {\n    console.error('Error getting trending songs:', error);\n    return [];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}