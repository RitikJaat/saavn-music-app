{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst API_BASE_URL = 'https://saavn.dev/api';\nconst usePlaylistSongs = playlistId => {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalCount, setTotalCount] = useState(0);\n  useEffect(() => {\n    if (!playlistId) {\n      setLoading(false);\n      return;\n    }\n    const loadAllSongs = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        var _initialResponse$data;\n        // Direct API call to ensure we get the freshest response\n        const initialResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n          params: {\n            id: playlistId\n          },\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Get initial data and metadata\n        if (!((_initialResponse$data = initialResponse.data) !== null && _initialResponse$data !== void 0 && _initialResponse$data.data)) {\n          throw new Error('Invalid response from API');\n        }\n        const playlistData = initialResponse.data.data;\n        const initialSongs = playlistData.songs || [];\n\n        // Get song count from various possible fields\n        const songCount = playlistData.songCount || playlistData.count || initialSongs.length;\n        setTotalCount(songCount);\n        console.log(`Playlist has ${songCount} songs according to metadata`);\n        console.log(`Initial load has ${initialSongs.length} songs`);\n\n        // If we have all songs already, return them\n        if (initialSongs.length >= songCount) {\n          setSongs(initialSongs);\n          setLoading(false);\n          return;\n        }\n\n        // Try alternative endpoints with higher limits\n        try {\n          var _altResponse$data, _altResponse$data$dat;\n          // Try the direct playlist songs endpoint with a large limit\n          const altResponse = await axios.get(`${API_BASE_URL}/playlists/${playlistId}/songs`, {\n            params: {\n              limit: 300\n            },\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if ((_altResponse$data = altResponse.data) !== null && _altResponse$data !== void 0 && (_altResponse$data$dat = _altResponse$data.data) !== null && _altResponse$data$dat !== void 0 && _altResponse$data$dat.songs && altResponse.data.data.songs.length > initialSongs.length) {\n            console.log(`Got ${altResponse.data.data.songs.length} songs from direct endpoint`);\n            setSongs(altResponse.data.data.songs);\n            setLoading(false);\n            return;\n          }\n        } catch (altError) {\n          console.log('Alternative endpoint failed, trying manual pagination');\n        }\n\n        // Manual pagination approach\n        let allSongs = [...initialSongs];\n        let page = 2;\n        let continueLoading = true;\n        while (continueLoading && allSongs.length < songCount) {\n          try {\n            var _pageResponse$data, _pageResponse$data$da;\n            console.log(`Fetching page ${page} of songs...`);\n\n            // Create a new request with the page parameter\n            const pageResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n              params: {\n                id: playlistId,\n                page: page\n              },\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            const pageSongs = ((_pageResponse$data = pageResponse.data) === null || _pageResponse$data === void 0 ? void 0 : (_pageResponse$data$da = _pageResponse$data.data) === null || _pageResponse$data$da === void 0 ? void 0 : _pageResponse$data$da.songs) || [];\n            if (pageSongs.length === 0) {\n              // No more songs to fetch\n              continueLoading = false;\n            } else {\n              console.log(`Got ${pageSongs.length} more songs from page ${page}`);\n              allSongs = [...allSongs, ...pageSongs];\n              page++;\n            }\n          } catch (pageError) {\n            console.error(`Error fetching page ${page}:`, pageError);\n            continueLoading = false;\n          }\n        }\n        console.log(`Total songs loaded: ${allSongs.length}`);\n        setSongs(allSongs);\n\n        // If we couldn't get all songs, set an error message\n        if (allSongs.length < songCount) {\n          setError(`Note: Could only load ${allSongs.length} out of ${songCount} songs due to API limitations.`);\n        }\n      } catch (err) {\n        console.error('Error loading playlist songs:', err);\n        setError('Failed to load all songs from this playlist.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadAllSongs();\n  }, [playlistId]);\n  return {\n    songs,\n    loading,\n    error,\n    totalCount\n  };\n};\n_s(usePlaylistSongs, \"R7BJ+i9GxQbrAeekv3ncqd8XjVM=\");\nexport default usePlaylistSongs;","map":{"version":3,"names":["useState","useEffect","axios","API_BASE_URL","usePlaylistSongs","playlistId","_s","songs","setSongs","loading","setLoading","error","setError","totalCount","setTotalCount","loadAllSongs","_initialResponse$data","initialResponse","get","params","id","headers","data","Error","playlistData","initialSongs","songCount","count","length","console","log","_altResponse$data","_altResponse$data$dat","altResponse","limit","altError","allSongs","page","continueLoading","_pageResponse$data","_pageResponse$data$da","pageResponse","pageSongs","pageError","err"],"sources":["/home/m0nster/Desktop/Code/Test/saavn-music-app/src/hooks/usePlaylistSongs.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Song } from '../types';\nimport axios from 'axios';\n\nconst API_BASE_URL = 'https://saavn.dev/api';\n\nconst usePlaylistSongs = (playlistId: string | undefined) => {\n  const [songs, setSongs] = useState<Song[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState(0);\n\n  useEffect(() => {\n    if (!playlistId) {\n      setLoading(false);\n      return;\n    }\n\n    const loadAllSongs = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Direct API call to ensure we get the freshest response\n        const initialResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n          params: { id: playlistId },\n          headers: { 'Content-Type': 'application/json' }\n        });\n\n        // Get initial data and metadata\n        if (!initialResponse.data?.data) {\n          throw new Error('Invalid response from API');\n        }\n\n        const playlistData = initialResponse.data.data;\n        const initialSongs = playlistData.songs || [];\n        \n        // Get song count from various possible fields\n        const songCount = playlistData.songCount || playlistData.count || initialSongs.length;\n        setTotalCount(songCount);\n        \n        console.log(`Playlist has ${songCount} songs according to metadata`);\n        console.log(`Initial load has ${initialSongs.length} songs`);\n\n        // If we have all songs already, return them\n        if (initialSongs.length >= songCount) {\n          setSongs(initialSongs);\n          setLoading(false);\n          return;\n        }\n\n        // Try alternative endpoints with higher limits\n        try {\n          // Try the direct playlist songs endpoint with a large limit\n          const altResponse = await axios.get(`${API_BASE_URL}/playlists/${playlistId}/songs`, {\n            params: { limit: 300 },\n            headers: { 'Content-Type': 'application/json' }\n          });\n\n          if (altResponse.data?.data?.songs && altResponse.data.data.songs.length > initialSongs.length) {\n            console.log(`Got ${altResponse.data.data.songs.length} songs from direct endpoint`);\n            setSongs(altResponse.data.data.songs);\n            setLoading(false);\n            return;\n          }\n        } catch (altError) {\n          console.log('Alternative endpoint failed, trying manual pagination');\n        }\n\n        // Manual pagination approach\n        let allSongs = [...initialSongs];\n        let page = 2;\n        let continueLoading = true;\n\n        while (continueLoading && allSongs.length < songCount) {\n          try {\n            console.log(`Fetching page ${page} of songs...`);\n            \n            // Create a new request with the page parameter\n            const pageResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n              params: { \n                id: playlistId,\n                page: page\n              },\n              headers: { 'Content-Type': 'application/json' }\n            });\n\n            const pageSongs = pageResponse.data?.data?.songs || [];\n            \n            if (pageSongs.length === 0) {\n              // No more songs to fetch\n              continueLoading = false;\n            } else {\n              console.log(`Got ${pageSongs.length} more songs from page ${page}`);\n              allSongs = [...allSongs, ...pageSongs];\n              page++;\n            }\n          } catch (pageError) {\n            console.error(`Error fetching page ${page}:`, pageError);\n            continueLoading = false;\n          }\n        }\n\n        console.log(`Total songs loaded: ${allSongs.length}`);\n        setSongs(allSongs);\n\n        // If we couldn't get all songs, set an error message\n        if (allSongs.length < songCount) {\n          setError(`Note: Could only load ${allSongs.length} out of ${songCount} songs due to API limitations.`);\n        }\n      } catch (err) {\n        console.error('Error loading playlist songs:', err);\n        setError('Failed to load all songs from this playlist.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadAllSongs();\n  }, [playlistId]);\n\n  return { songs, loading, error, totalCount };\n};\n\nexport default usePlaylistSongs; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}