{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst API_BASE_URL = 'https://saavn.dev/api';\nconst usePlaylistSongs = playlistId => {\n  _s();\n  const [songs, setSongs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalCount, setTotalCount] = useState(0);\n  useEffect(() => {\n    if (!playlistId) {\n      setLoading(false);\n      return;\n    }\n    const loadAllSongs = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        var _initialResponse$data;\n        // Direct API call to ensure we get the freshest response\n        const initialResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n          params: {\n            id: playlistId\n          },\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n\n        // Get initial data and metadata\n        if (!((_initialResponse$data = initialResponse.data) !== null && _initialResponse$data !== void 0 && _initialResponse$data.data)) {\n          throw new Error('Invalid response from API');\n        }\n        const playlistData = initialResponse.data.data;\n        const initialSongs = playlistData.songs || [];\n\n        // Get song count from various possible fields\n        const songCount = playlistData.songCount || playlistData.count || initialSongs.length;\n        setTotalCount(songCount);\n        console.log(`Playlist has ${songCount} songs according to metadata`);\n        console.log(`Initial load has ${initialSongs.length} songs`);\n\n        // Initial approach: Try with larger page size\n        try {\n          var _largePageResponse$da, _largePageResponse$da2;\n          console.log(\"Trying with large page size...\");\n          const largePageResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n            params: {\n              id: playlistId,\n              page: 1,\n              limit: 100 // Request 100 songs at once\n            },\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if ((_largePageResponse$da = largePageResponse.data) !== null && _largePageResponse$da !== void 0 && (_largePageResponse$da2 = _largePageResponse$da.data) !== null && _largePageResponse$da2 !== void 0 && _largePageResponse$da2.songs && largePageResponse.data.data.songs.length > initialSongs.length) {\n            const largeSongs = largePageResponse.data.data.songs;\n            console.log(`Got ${largeSongs.length} songs with large page size`);\n\n            // If we got a good number, use these songs\n            if (largeSongs.length >= 50 || largeSongs.length >= songCount) {\n              setSongs(largeSongs);\n              setLoading(false);\n              return;\n            }\n          }\n        } catch (largePageError) {\n          console.log(\"Large page approach failed, continuing with other methods\");\n        }\n\n        // Try alternative endpoints with higher limits\n        try {\n          var _altResponse$data, _altResponse$data$dat;\n          // Try the direct playlist songs endpoint with a large limit\n          const altResponse = await axios.get(`${API_BASE_URL}/playlists/${playlistId}/songs`, {\n            params: {\n              limit: 300\n            },\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          if ((_altResponse$data = altResponse.data) !== null && _altResponse$data !== void 0 && (_altResponse$data$dat = _altResponse$data.data) !== null && _altResponse$data$dat !== void 0 && _altResponse$data$dat.songs && altResponse.data.data.songs.length > initialSongs.length) {\n            console.log(`Got ${altResponse.data.data.songs.length} songs from direct endpoint`);\n            setSongs(altResponse.data.data.songs);\n            setLoading(false);\n            return;\n          }\n        } catch (altError) {\n          console.log('Alternative endpoint failed, trying manual pagination');\n        }\n\n        // Try fetching songs from the JioSaavn search API directly\n        try {\n          // Use the playlist name to search for songs\n          const playlistName = playlistData.name || playlistData.title;\n          if (playlistName) {\n            var _searchResponse$data, _searchResponse$data$;\n            console.log(`Trying to search songs related to playlist: ${playlistName}`);\n            const searchResponse = await axios.get(`${API_BASE_URL}/search/songs`, {\n              params: {\n                query: playlistName,\n                limit: 50\n              },\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            if ((_searchResponse$data = searchResponse.data) !== null && _searchResponse$data !== void 0 && (_searchResponse$data$ = _searchResponse$data.data) !== null && _searchResponse$data$ !== void 0 && _searchResponse$data$.results && searchResponse.data.data.results.length > initialSongs.length) {\n              const searchSongs = searchResponse.data.data.results;\n              console.log(`Found ${searchSongs.length} songs via search`);\n              setSongs(searchSongs);\n              setLoading(false);\n              return;\n            }\n          }\n        } catch (searchError) {\n          console.log('Search approach failed');\n        }\n\n        // Manual pagination approach as last resort\n        let allSongs = [...initialSongs];\n        let page = 2;\n        let continueLoading = true;\n        let retryCount = 0;\n        const MAX_RETRIES = 3;\n        while (continueLoading && allSongs.length < songCount && retryCount < MAX_RETRIES) {\n          try {\n            var _pageResponse$data, _pageResponse$data$da;\n            console.log(`Fetching page ${page} of songs...`);\n\n            // Create a new request with the page parameter\n            const pageResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n              params: {\n                id: playlistId,\n                page: page,\n                limit: 50 // Try to get 50 per page\n              },\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            });\n            const pageSongs = ((_pageResponse$data = pageResponse.data) === null || _pageResponse$data === void 0 ? void 0 : (_pageResponse$data$da = _pageResponse$data.data) === null || _pageResponse$data$da === void 0 ? void 0 : _pageResponse$data$da.songs) || [];\n            if (pageSongs.length === 0) {\n              // No more songs to fetch, retry with different parameters\n              retryCount++;\n              page = 1; // Reset page\n              console.log(`No songs in page ${page}, retry #${retryCount}`);\n            } else {\n              console.log(`Got ${pageSongs.length} more songs from page ${page}`);\n              allSongs = [...allSongs, ...pageSongs];\n              page++;\n\n              // Stop if we have enough songs\n              if (allSongs.length >= 50) {\n                console.log(`We have ${allSongs.length} songs, which is enough to display`);\n                break;\n              }\n            }\n          } catch (pageError) {\n            console.error(`Error fetching page ${page} of songs:`, pageError);\n            retryCount++;\n          }\n\n          // Stop after 3 attempts if we still can't get enough songs\n          if (retryCount >= MAX_RETRIES) {\n            console.log('Max retries reached, using whatever songs we have');\n            continueLoading = false;\n          }\n        }\n        console.log(`Total songs loaded: ${allSongs.length}`);\n        setSongs(allSongs);\n\n        // If we couldn't get all songs but have a reasonable number, don't show an error\n        if (allSongs.length < songCount && allSongs.length > 0) {\n          if (allSongs.length < 20) {\n            setError(`Note: Only showing ${allSongs.length} out of ${songCount} songs due to API limitations.`);\n          } else {\n            console.log(`Showing ${allSongs.length} out of ${songCount} songs`);\n          }\n        }\n      } catch (err) {\n        console.error('Error loading playlist songs:', err);\n        setError('Failed to load all songs from this playlist.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadAllSongs();\n  }, [playlistId]);\n  return {\n    songs,\n    loading,\n    error,\n    totalCount\n  };\n};\n_s(usePlaylistSongs, \"R7BJ+i9GxQbrAeekv3ncqd8XjVM=\");\nexport default usePlaylistSongs;","map":{"version":3,"names":["useState","useEffect","axios","API_BASE_URL","usePlaylistSongs","playlistId","_s","songs","setSongs","loading","setLoading","error","setError","totalCount","setTotalCount","loadAllSongs","_initialResponse$data","initialResponse","get","params","id","headers","data","Error","playlistData","initialSongs","songCount","count","length","console","log","_largePageResponse$da","_largePageResponse$da2","largePageResponse","page","limit","largeSongs","largePageError","_altResponse$data","_altResponse$data$dat","altResponse","altError","playlistName","name","title","_searchResponse$data","_searchResponse$data$","searchResponse","query","results","searchSongs","searchError","allSongs","continueLoading","retryCount","MAX_RETRIES","_pageResponse$data","_pageResponse$data$da","pageResponse","pageSongs","pageError","err"],"sources":["/home/m0nster/Desktop/Code/Test/saavn-music-app/src/hooks/usePlaylistSongs.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Song } from '../types';\nimport axios from 'axios';\n\nconst API_BASE_URL = 'https://saavn.dev/api';\n\nconst usePlaylistSongs = (playlistId: string | undefined) => {\n  const [songs, setSongs] = useState<Song[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [totalCount, setTotalCount] = useState(0);\n\n  useEffect(() => {\n    if (!playlistId) {\n      setLoading(false);\n      return;\n    }\n\n    const loadAllSongs = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Direct API call to ensure we get the freshest response\n        const initialResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n          params: { id: playlistId },\n          headers: { 'Content-Type': 'application/json' }\n        });\n\n        // Get initial data and metadata\n        if (!initialResponse.data?.data) {\n          throw new Error('Invalid response from API');\n        }\n\n        const playlistData = initialResponse.data.data;\n        const initialSongs = playlistData.songs || [];\n        \n        // Get song count from various possible fields\n        const songCount = playlistData.songCount || playlistData.count || initialSongs.length;\n        setTotalCount(songCount);\n        \n        console.log(`Playlist has ${songCount} songs according to metadata`);\n        console.log(`Initial load has ${initialSongs.length} songs`);\n\n        // Initial approach: Try with larger page size\n        try {\n          console.log(\"Trying with large page size...\");\n          const largePageResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n            params: { \n              id: playlistId,\n              page: 1,\n              limit: 100 // Request 100 songs at once\n            },\n            headers: { 'Content-Type': 'application/json' }\n          });\n          \n          if (largePageResponse.data?.data?.songs && \n              largePageResponse.data.data.songs.length > initialSongs.length) {\n            const largeSongs = largePageResponse.data.data.songs;\n            console.log(`Got ${largeSongs.length} songs with large page size`);\n            \n            // If we got a good number, use these songs\n            if (largeSongs.length >= 50 || largeSongs.length >= songCount) {\n              setSongs(largeSongs);\n              setLoading(false);\n              return;\n            }\n          }\n        } catch (largePageError) {\n          console.log(\"Large page approach failed, continuing with other methods\");\n        }\n        \n        // Try alternative endpoints with higher limits\n        try {\n          // Try the direct playlist songs endpoint with a large limit\n          const altResponse = await axios.get(`${API_BASE_URL}/playlists/${playlistId}/songs`, {\n            params: { limit: 300 },\n            headers: { 'Content-Type': 'application/json' }\n          });\n\n          if (altResponse.data?.data?.songs && altResponse.data.data.songs.length > initialSongs.length) {\n            console.log(`Got ${altResponse.data.data.songs.length} songs from direct endpoint`);\n            setSongs(altResponse.data.data.songs);\n            setLoading(false);\n            return;\n          }\n        } catch (altError) {\n          console.log('Alternative endpoint failed, trying manual pagination');\n        }\n\n        // Try fetching songs from the JioSaavn search API directly\n        try {\n          // Use the playlist name to search for songs\n          const playlistName = playlistData.name || playlistData.title;\n          if (playlistName) {\n            console.log(`Trying to search songs related to playlist: ${playlistName}`);\n            \n            const searchResponse = await axios.get(`${API_BASE_URL}/search/songs`, {\n              params: { \n                query: playlistName,\n                limit: 50\n              },\n              headers: { 'Content-Type': 'application/json' }\n            });\n            \n            if (searchResponse.data?.data?.results && \n                searchResponse.data.data.results.length > initialSongs.length) {\n              const searchSongs = searchResponse.data.data.results;\n              console.log(`Found ${searchSongs.length} songs via search`);\n              setSongs(searchSongs);\n              setLoading(false);\n              return;\n            }\n          }\n        } catch (searchError) {\n          console.log('Search approach failed');\n        }\n\n        // Manual pagination approach as last resort\n        let allSongs = [...initialSongs];\n        let page = 2;\n        let continueLoading = true;\n        let retryCount = 0;\n        const MAX_RETRIES = 3;\n\n        while (continueLoading && allSongs.length < songCount && retryCount < MAX_RETRIES) {\n          try {\n            console.log(`Fetching page ${page} of songs...`);\n            \n            // Create a new request with the page parameter\n            const pageResponse = await axios.get(`${API_BASE_URL}/playlists`, {\n              params: { \n                id: playlistId,\n                page: page,\n                limit: 50 // Try to get 50 per page\n              },\n              headers: { 'Content-Type': 'application/json' }\n            });\n\n            const pageSongs = pageResponse.data?.data?.songs || [];\n            \n            if (pageSongs.length === 0) {\n              // No more songs to fetch, retry with different parameters\n              retryCount++;\n              page = 1; // Reset page\n              console.log(`No songs in page ${page}, retry #${retryCount}`);\n            } else {\n              console.log(`Got ${pageSongs.length} more songs from page ${page}`);\n              allSongs = [...allSongs, ...pageSongs];\n              page++;\n              \n              // Stop if we have enough songs\n              if (allSongs.length >= 50) {\n                console.log(`We have ${allSongs.length} songs, which is enough to display`);\n                break;\n              }\n            }\n          } catch (pageError) {\n            console.error(`Error fetching page ${page} of songs:`, pageError);\n            retryCount++;\n          }\n          \n          // Stop after 3 attempts if we still can't get enough songs\n          if (retryCount >= MAX_RETRIES) {\n            console.log('Max retries reached, using whatever songs we have');\n            continueLoading = false;\n          }\n        }\n\n        console.log(`Total songs loaded: ${allSongs.length}`);\n        setSongs(allSongs);\n\n        // If we couldn't get all songs but have a reasonable number, don't show an error\n        if (allSongs.length < songCount && allSongs.length > 0) {\n          if (allSongs.length < 20) {\n            setError(`Note: Only showing ${allSongs.length} out of ${songCount} songs due to API limitations.`);\n          } else {\n            console.log(`Showing ${allSongs.length} out of ${songCount} songs`);\n          }\n        }\n      } catch (err) {\n        console.error('Error loading playlist songs:', err);\n        setError('Failed to load all songs from this playlist.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadAllSongs();\n  }, [playlistId]);\n\n  return { songs, loading, error, totalCount };\n};\n\nexport default usePlaylistSongs; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}